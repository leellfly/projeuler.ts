/*
    Highly Divisible Triangular Number

    The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle
    number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
        1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

    Let us list the factors of the first seven triangle numbers:
        1: 1
        3: 1,3
        6: 1,2,3,6
        10: 1,2,5,10
        15: 1,3,5,15
        21: 1,3,7,21
        28: 1,2,4,7,14,28
    
    We can see that 28 is the first triangle number to have over five divisors.

    What is the value of the first triangle number to have over five hundred divisors?
*/
import { measureTime } from "../utils"

function solve(targetDivisorsCount: number): number {
    const getPrimeFactors = (num: number) => {
        const factors: Record<number, number> = {}
        let divisor = 2

        while (num > 1) {
            while (num % divisor === 0) {
                factors[divisor] = (factors[divisor] || 0) + 1
                num /= divisor
            }
            divisor++
        }

        return factors
    }

    const countDivisors = (num: number) => {
        const primeFactors = getPrimeFactors(num)
        return Object.values(primeFactors).reduce((pre, cur) => pre * (cur + 1), 1)
    }

    let triangleNumber = 1
    let index = 1

    while (countDivisors(triangleNumber) <= targetDivisorsCount) {
        index++
        triangleNumber += index
    }

    return triangleNumber
}

const [result, elapsedTime] = measureTime(() => solve(500))
console.log('result', result) //76576500 
console.log(`Elapsed Time: ${elapsedTime} milliseconds`)

export { }
/**
 * N = (p1**e1)·(p2**e2)·...·(pk**ek) => Number of factors：（e1+1）(e2+1)(ek+1)
 */

