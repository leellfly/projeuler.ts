/*
  Pentagon Numbers

  Pentagonal numbers are generated by the formula, Pn=n(3n-1)/2. The first ten pentagonal numbers
  are:
    1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

  It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 - 22 = 48, is not
  pentagonal.

  Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal
  and D = |Pk - Pj| is minimised; what is the value of D?
*/

import { measureTime } from "../utils"

function solve() {
  const isPentagonal = (n: number) => {
    const x1 = (1 + Math.sqrt(1 + 24 * n)) / 6;
    return Number.isInteger(x1);
  };

  const getPjAndPk = (nums: number[], target: number) => {
    let result: { left: number; right: number } = { left: 0, right: 0 };

    let left = 0;
    let right = nums.length - 1;

    while (left < right) {
      const sum = nums[left] + nums[right];
      if (sum === target) {
        result = { left: nums[left], right: nums[right] };
        break;
      } else if (sum < target) {
        left++;
      } else {
        right--;
      }
    }

    return result;
  };

  const PentagonalArr: Array<number> = [];

  for (let n = 1; n < 100000; n++) {
    const p = n * (3 * n - 1) / 2;

    const { left, right } = getPjAndPk(PentagonalArr, p);
    if (left && right) {
      const d = Math.abs(right - left);
      console.log(d,'d');
      if (isPentagonal(d)) {
        console.log(d);
        break;
      }
    }

    PentagonalArr.push(p);
  }
}


const [result, elapsedTime] = measureTime(() => solve())
console.log('result', result)
console.log(`Elapsed Time: ${elapsedTime} milliseconds`)
